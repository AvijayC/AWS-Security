Description: "This template deploys a basic VPC with a pair of public and private subnets. It's across 2 AZs. It deploys an internet gateway, a default route to it on the public subnets."

Parameters:
  EnvironmentName:
    Description: "Environment name that's prefixed to resource names"
    Type: String
    Default: "dev"
    MinLength: "2"
    MaxLength: "100"
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    ConstraintDescription: "must start with a letter and contain only letters, numbers, and hyphens"

  VpcCIDR:
    Description: "CIDR block for the VPC"
    Type: String

  RandomValue1:
    Description: Put a random region name here for map testing later.
    Type: String
  
  # PublicSubnet1CIDR:
  #   Description: "CIDR block for az1_public"
  #   Type: String
  #   Default: "10.0.10.0/24"

  # PublicSubnet2CIDR:
  #   Description: "CIDR block for az2_public"
  #   Type: String
  #   Default: "10.0.11.0/24"

  # PrivateSubnet1CIDR:
  #   Description: "CIDR block for az1_private"
  #   Type: String
  #   Default: "10.0.20.0/24"

  # PrivateSubnet2CIDR:
  #   Description: "CIDR block for az2_private"
  #   Type: String
  #   Default: "10.0.21.0/24"
  
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ "0", !Cidr [ !GetAtt VPC.CidrBlock, "16", "8"] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1) 

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ "1", !Cidr [ !GetAtt VPC.CidrBlock, "16", "8"] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2) 

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ "4", !Cidr [ !GetAtt VPC.CidrBlock, "16", "8"] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1) 

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ "5", !Cidr [ !GetAtt VPC.CidrBlock, "16", "12"] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2) 
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
  
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
    
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: !Sub "${EnvironmentName} Security group with no ingress rule"
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "basic-ssh-sg"
      GroupDescription: "Allows only SSH in from anywhere, as well as ICMP"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - VPC
      - SSHSecurityGroup
      - PublicSubnet1
      - InternetGateway
    Properties:
      ImageId: ami-0b09ffb6d8b58ca91
      KeyName: "acct-a-keypair-20250719"
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref SSHSecurityGroup
          SubnetId: !Ref PublicSubnet1

      

Mappings:
  RegionMap:
    us-east-1:
      SomeValue1: 'east 1 woo'
      SomeValue2: 'east 1 yo'
    us-east-2:
      SomeValue1: 'east 2 woo'
      SomeValue2: 'east 2 yo'
    us-west-1:
      SomeValue1: 'west 1 woo'
      SomeValue2: 'west 1 yo'
    us-west-2:
      SomeValue1: 'west 2 woo'
      # Purposefully leave out the 2nd one to see what happens. 


Conditions:
  IsProd: !Equals 
    - !Ref "EnvironmentName"
    - 'prod'


Outputs:

  OutputIsProd:
    Description: Boolean marking if this is named as a prod env
    Value: !If [IsProd, "true", "false"] 

  DebugMapOutput1:
    Description: Finding a value in a dummy map, sublevel 1.
    Value: !FindInMap [ "RegionMap", !Ref "RandomValue1", "SomeValue1" ]

  DebugMapOutput2:
    Description: Finding a value in a dummy map, sublevel 2.
    Value: !FindInMap [ "RegionMap", !Ref "RandomValue1", "SomeValue2" ]

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

  NoIngressSecurityGroup:
    Description: A reference to the security group with no ingress rules
    Value: !Ref NoIngressSecurityGroup

  EC2InstancePublicIp:
    Description: Public IP for the ec2 instance that was made
    Value: !GetAtt MyEC2Instance.PublicIp